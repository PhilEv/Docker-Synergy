###
# Copyright (2017) Hewlett Packard Enterprise Development LP
#
# Licensed under the Apache License, Version 2.0 (the "License");
# You may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###
---
- hosts: dtr_main 
  gather_facts: false

  vars_files:
    - ../group_vars/vars
    - ../group_vars/vault

  vars:
    ovc: "{{ omnistack_ovc | random }}"
    nfs_vm: "{{ groups['nfs'][0] }}"
    sleep_interval: 5

  environment: "{{ env }}"

  tasks:
    - name: Get TimeStamp
      command: date -I'seconds' 
      register: timestamp

    - name: Store the timestamp
      set_fact:
        timestamp: "{{ timestamp.stdout }}"

    - name: Creates directory
      file:
        path: /root/scripts
        state: directory

    - name: Copy backup script to dtr01
      template: src=../templates/backup_dtr_metadata.sh.j2 dest=/root/scripts/backup_dtr_metadata.sh

    - file:
        path: /root/scripts/backup_dtr_metadata.sh
        mode: 0744

    - name: Copy backup script to dtr01
      template: src=../templates/backup_dtr_get_replica.sh.j2 dest=/root/scripts/backup_dtr_get_replica.sh

    - file:
        path: /root/scripts/backup_dtr_get_replica.sh
        mode: 0744

    - name: Get the replica ID
      shell: /root/scripts/backup_dtr_get_replica.sh
      register: replica_id

    - set_fact:
        replica_id: " {{ replica_id.stdout }}" 
        backup_name:  "backup_dtr_{{ replica_id.stdout }}_{{ inventory_hostname }}_{{ timestamp }}"

    - name: Backup the metadata now
      shell: /root/scripts/backup_dtr_metadata.sh {{ replica_id }} {{ backup_name }}
      register: res

    - debug: var=res

# now take a backup of the NFS VM

    - name: Get Simplivity token
      shell: curl -k https://simplivity@{{ ovc }}/api/oauth/token -d grant_type=password -d username='{{ simplivity_username }}' -d password='{{ simplivity_password }}' | python -mjson.tool | grep access_token | awk -F'"' '{ print $4 }'
      register: token

    - name: Retrieve the ID of the NFS VM
      uri:
        url: "https://{{ ovc }}/api/virtual_machines?name={{ nfs_vm }}&state=ALIVE&omnistack_cluster_name={{ svt_cluster }}&fields=id&case=sensitive"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: GET
        status_code: 200
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      register: ovc_res

    - fail:
        msg: "The NFS virtual machine {{ nfs_vm }} cannot be found, it may have been renamed since Day 0"
      when: ovc_res.json.count != 1

    - name: Initiate a Manual Backup for the NFS VM
      uri:
        url: "https://{{ ovc }}/api/virtual_machines/{{ id_nfsvm }}/backup"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: POST
        body: {"backup_name": "{{ backup_name }}", "app_consistent": false, "consistency_type": "NONE", "retention": 60}
        status_code: 202
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      vars:
        id_nfsvm: "{{ ovc_res.json.virtual_machines[0].id }}"
      register: manual_backup_res

    - debug:
        var=manual_backup_res.json.task.id

    - name: Wait for the Task to Finish
      uri:
        url: "https://{{ ovc }}/api/tasks/{{ task_id }}"
        headers:
          Content-Type: application/vnd.simplivity.v1+json
          Authorization: Bearer {{ token.stdout }}
        method: GET
        status_code: 200
        body_format: json
        force_basic_auth: yes
        validate_certs: no
      vars:
        task_id: "{{  manual_backup_res.json.task.id }}"
      register: task_status
      until: task_status.json.task.state != "IN_PROGRESS" 
      retries: 3
      delay: 1
    - debug: var=task_status.json.task.state


